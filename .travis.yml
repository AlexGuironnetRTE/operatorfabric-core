os: linux
dist: xenial
addons:
  sonarcloud:
    organization: opfab
    token:
      secure: Y6lcwkarytMScY+s2DLUuXodA6mQSBXqtuiypw6g6MO8xn5HUwy0MtmYVTfoNCRjSlZcFDaoLPFlkitRCAeZKJpeIw1iGbJFeLWUDI9QLwXebni4WuaWhNjuYIYt8IcP6im4YdzRuzz/TG1FHShtIDwhg7assBy4L/vtiOUTfxP8+/JgAR3Hl/OWFl0s+DY7Ldc8DnS7KTaXu/imjIKE68yWz77uYGzS+P4BZP79peVjSIoQXIb4p8KyfPJvIHEnt/m1MHDr67LzkUd2alypkCNSG/vxlL07oJTJQyPWKihpzHiXVH5jL4RTZVLVjBsSIuzMuf/jzP+s8S+iuEgHAKj+SC8DF02pciRj6naZNcXBFBTW9YeAXqLD3Eim/ZvGQtPq88KXZsvqJ9XluRz4Zx9cTDtjty7RQJBQzP98cA4n0d1t5NWRcyBJoijpDDax5jD6QkICAGtfR7Q8X0r8/TXf3VhTI/z3fhikTqTPvBd5jdFG3gkg/kTW6IFU95mAMQBC4CIKxNPnt7ojp+ZaqXKynbtD5FparQTP9sFOncen5M8AepQKnRGY8evfXl230PkDHA1S1YFfN/EdSd0tmkOV1nck9P+0Z25V1eXObJcMV3lHwFAosF9523t82DOWc+3bJgCmHa3AXKGoqB1sOFzgh7eOOudcGd2pcBjmMyU=
services:
- docker
language: java
# To avoid duplicate builds generated by tags
if: tag IS blank
before_install:
  - export OF_VERSION=$(<VERSION)
  - export GRADLE_OPTS="-XX:MaxMetaspaceSize=512m -Xmx1024m"
  - export SDKMAN_CONFIG_FILE=${HOME}/.sdkman/etc/config
  - ./CICD/travis/check_version.sh --branch $TRAVIS_BRANCH --version $OF_VERSION
install:
  # first install needs to remove ~/.sdkman (empty in our case because created by cache step) otherwise SdkMan is not installed
  # then install sdkman
  - if [ -z "$(ls -A ${HOME}/.sdkman)" ]; then
    rm -fr ${HOME}/.sdkman ;
    curl -s "https://get.sdkman.io" | bash ;
    echo sdkman_auto_answer=true > ${SDKMAN_CONFIG_FILE} ;
    echo sdkman_auto_selfupdate=true >> ${SDKMAN_CONFIG_FILE} ;
    fi
  # needed in order to have sdk available into the current environment
  - source "${HOME}/.sdkman/bin/sdkman-init.sh" ;
  # sets up the required tools for the development environment with the appropriate version
  - source ./bin/load_environment_light.sh
  - sudo apt-get install realpath
  # install
  # displays versions of useful tools for visual checks
  - npm -version
  - node --version
  - sdk version
  - javac -version
jobs:
  include:
    - stage: test
      script:
        - echo "$DOCKERHUB_PWD" | docker login -u "$DOCKERHUB_USER" --password-stdin
        - docker-compose -f src/main/docker/test-environment/docker-compose.yml up -d
        - ./gradlew --build-cache copyDependencies test
        - docker-compose -f src/main/docker/test-environment/docker-compose.yml down
    - stage: test-sonar
      script:
        - echo "$DOCKERHUB_PWD" | docker login -u "$DOCKERHUB_USER" --password-stdin
        - docker-compose -f src/main/docker/test-environment/docker-compose.yml up -d
        - ./gradlew --build-cache copyDependencies test jacocoTestReport dockerTag${OF_VERSION}
        # [OC-865] Dropping dependency messing with typescript version as a workaround until sonar bug is fixed
        # See https://github.com/SonarSource/SonarJS/issues/1928 and https://community.sonarsource.com/t/error-about-unsupported-ts-version-while-project-is-using-supported-version/15776
        - rm -r ui/main/node_modules/@compodoc/ngd-core
        - rm -r ui/main/node_modules/ts-simple-ast
        - sonar-scanner
        - docker-compose -f src/main/docker/test-environment/docker-compose.yml down
        # Launch karate tests
        - cd config/docker
        - ./docker-compose.sh
        - cd ../../bin
        - ./waitForOpfabToStart.sh
        - cd ../src/test/api/karate
        - ./launchAll.sh
        - cd ../../../../config/docker
        - docker-compose down
        # Launch cypress tests
        - ./docker-compose-cypress.sh
        - cd ../../bin
        - ./waitForOpfabToStart.sh
        - cd $OF_HOME
        - ./gradlew runCypressTests
        - cd ./config/docker
        - docker-compose down
    - stage: doc
      script:
        - ./gradlew --build-cache generateSwaggerUI asciidoctor
        - ./CICD/travis/upload_doc.sh
    - stage: doc-latest
      script:
        - ./gradlew --build-cache generateSwaggerUI asciidoctor
        - ./CICD/travis/upload_doc.sh --updateLatest true
    - stage: doc-dry-run
      script:
        - ./gradlew --build-cache generateSwaggerUI asciidoctor
    - stage: docker-push-version
      script:
        - echo preparing images for version $OF_VERSION
        - echo "$DOCKERHUB_PWD" | docker login -u "$DOCKERHUB_USER" --password-stdin
        - ./gradlew --build-cache copyWorkingDir dockerPush${OF_VERSION} -x test
        - docker image ls -a|grep lfeoperatorfabric
    - stage: docker-push-latest
      script:
        - echo preparing images for version $OF_VERSION
        - echo "$DOCKERHUB_PWD" | docker login -u "$DOCKERHUB_USER" --password-stdin
        - ./gradlew --build-cache copyWorkingDir dockerPushLatest -x test
        - docker image ls -a|grep lfeoperatorfabric
    - stage: docker-tag-version
      script:
        - echo preparing images for version $OF_VERSION
        - ./gradlew --build-cache copyWorkingDir dockerTag${OF_VERSION} -x test
        - docker image ls -a|grep lfeoperatorfabric
stages:
  # Note: The condition on type is necessary to exclude PRs because their base branch is usually develop
  - name: test
    if: type = pull_request AND head_repo != opfab/operatorfabric-core
  - name: test-sonar
    if: NOT (type = pull_request AND head_repo != opfab/operatorfabric-core)
  - name: doc
    if: ((((type = cron OR commit_message =~ ci_documentation) AND branch = develop) OR (commit_message =~ ci_documentation AND NOT commit_message =~ ci_latest AND branch =~ .+hotfixes$)) AND NOT type = pull_request)
  - name: doc-latest
    if: (branch = master OR (branch =~ .+hotfixes$ AND commit_message =~ ci_latest)) AND NOT type = pull_request
  - name: doc-dry-run
    if: (NOT branch =~ .+hotfixes$) AND (NOT (branch IN (master,develop)) AND commit_message =~ ci_documentation)
  - name: docker-push-version
    if: (((type = cron OR commit_message =~ ci_docker) AND (branch = develop OR branch =~ .+hotfixes$)) OR branch = master) AND NOT type = pull_request
  - name: docker-push-latest
    if: branch = master OR (branch =~ .+hotfixes$ AND commit_message =~ ci_latest) AND NOT type = pull_request
  - name: docker-tag-version
    if: (branch =~ .+release$) OR (NOT (branch IN (master,develop)) AND commit_message =~ ci_docker)
before_cache:
  # cleanup gradle caches
  - rm -f  ${HOME}/.gradle/caches/modules-2/modules-2.lock
  - rm -fr ${HOME}/.gradle/caches/*/plugin-resolution/
cache:
  bundler: true
  directories:
    # caches gradle caches
    - ${HOME}/.gradle/caches/
    - ${HOME}/.gradle/wrapper/
    - ${HOME}/.gradle/dependency-check-data/
    # cache ui dependencies
    - ui/main/nodes_modules
    - ${HOME}/.sdkman
env:
  global:
  - secure: JcBbhl5OzxBBpZocEs3UM300qx5GOvMu9i1IiALYqIuIE2RaWlvqWjVy19MiiY6DSn9i7yIhxuhCC0mBblRPAu7BLJPxlySXpN/Ip/MwJ+dOYVqye7rOB1ov3rVBdEkpCQFG9Lf+acN6/yarw/PUKU70t7uNxdthDiMeJIVt1qqzJQHOE0R0WjOawZ4dMiMuk5VFB2OhVpr6ey8EBt6hq9try60paQraiDjNfa3vpVe1TWKJ2u4lYMFh/RTvfqWv9ZOtfWhK0WU3ZjOAv06/n2ChpCPO21RxE36IfuWzdDoNeuByKvwv6VAel0HmLectS7Yp35J38EXemtiKL0VoV+oRqYbpHo+7MHLGzXlzFXeCnZ/6kcu139zhE42O397lPaNqwKtOc8XMPi+Q9/4ng9E6t2hTuY6CwKdlZN8442VfhRyJUMZBFYpTeZisphebvn/XkmQ5LvdoY90iohHOP/J+wSvEo+lXXfhmHhAezFBffC+c5RzZs8nv5Rcg8esSOFEpkLGgfgdMcj9uORDnhjVHBoemg/DECGpZSTzrphv42a3s376F2h5qYfZRKZMi2aRmS5+adkN4QbxzN9gi/0QMuU9C3q9SIxmEWGVzj7SY0Gx0/tdjHkgkEv4CB7phNZafNMi+cUZZ1675ZMdLwMIuc2aLjjaRrZECgJjZOUs=
  - secure: W+Q8bGx5RpJOYgofrD2fucH2Pay/SiHf4e3cXC3OVzLHC/pzS4/46e9QQEcZZqB+OKZVfi13odn7dvLK2LKYBz4sO4agZvqHD2DVlwdKzaGLkD83HEgLQKdA6H+jo4oyzsu6GOVmJ44qxi/GeHekwYVUSiuB10tWVi9i1KAB3BZwL6vaanzjpWTgt6ULssM5B8W0b8cjOxE/xkGZZUEgM39/4DAygm2Ui2+Or8BcQZPLVniUv0qASIE7X+7FWslMPUE4z7T/MzqYxTL+y2cSwdn88RJlcOv4AY1cBOOoSZyZUz/P9kAPp+BFIH8zMDKQhVv+6ya1+yAjatR1W2w9aQf+VuFemBr0UaGx/iLLi3ZF4/zfLQzLVEu/o6lCe6iuqNSOGiLi6E+AZbCUQrQDwAe8Reb//QNVcDudraJxjXmARlnK+wzU+2q8cVzHy3eCRAMZRnqjXN2RFchUEmRWQlAx2DIUg5laqpo2zul2xLMt3tlUNeznrkN6BogXRnR7K5F3NUOhW01+AwoFVqsC29XoYJKYjrCusD9WPm9EfYH4Qr8YTqOuaRCEnqOdgN5C/YU7c3PL1Vw7ZEu5dMeanyGW/ANDoZ4u/tImnVV9eayQsPQIpVP2gKGL5M57qoYLj03gq5oUwt9tx+xKNeH6gpvwrqeA0QqlAH8JJnylTtg=
